//------------------------------------------------------------------------------
// <auto-generated>
//     此代码是根据模板生成的。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，则所做更改将丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace TZHSWEET.Entity
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(tbRole))]
    [KnownType(typeof(tbUser))]
    public partial class tbUserRole: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region 基元属性
    
        [DataMember]
        public int UserRoleID
        {
            get { return _userRoleID; }
            set
            {
                if (_userRoleID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“UserRoleID”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    _userRoleID = value;
                    OnPropertyChanged("UserRoleID");
                }
            }
        }
        private int _userRoleID;
    
        [DataMember]
        public Nullable<int> UserID
        {
            get { return _userID; }
            set
            {
                if (_userID != value)
                {
                    ChangeTracker.RecordOriginalValue("UserID", _userID);
                    if (!IsDeserializing)
                    {
                        if (tbUser != null && tbUser.UserID != value)
                        {
                            tbUser = null;
                        }
                    }
                    _userID = value;
                    OnPropertyChanged("UserID");
                }
            }
        }
        private Nullable<int> _userID;
    
        [DataMember]
        public Nullable<int> RoleID
        {
            get { return _roleID; }
            set
            {
                if (_roleID != value)
                {
                    ChangeTracker.RecordOriginalValue("RoleID", _roleID);
                    if (!IsDeserializing)
                    {
                        if (tbRole != null && tbRole.RoleID != value)
                        {
                            tbRole = null;
                        }
                    }
                    _roleID = value;
                    OnPropertyChanged("RoleID");
                }
            }
        }
        private Nullable<int> _roleID;
    
        [DataMember]
        public Nullable<int> CreateUserID
        {
            get { return _createUserID; }
            set
            {
                if (_createUserID != value)
                {
                    _createUserID = value;
                    OnPropertyChanged("CreateUserID");
                }
            }
        }
        private Nullable<int> _createUserID;
    
        [DataMember]
        public Nullable<System.DateTime> CreateDate
        {
            get { return _createDate; }
            set
            {
                if (_createDate != value)
                {
                    _createDate = value;
                    OnPropertyChanged("CreateDate");
                }
            }
        }
        private Nullable<System.DateTime> _createDate;
    
        [DataMember]
        public Nullable<int> ModifyUserID
        {
            get { return _modifyUserID; }
            set
            {
                if (_modifyUserID != value)
                {
                    _modifyUserID = value;
                    OnPropertyChanged("ModifyUserID");
                }
            }
        }
        private Nullable<int> _modifyUserID;
    
        [DataMember]
        public Nullable<System.DateTime> ModifyDate
        {
            get { return _modifyDate; }
            set
            {
                if (_modifyDate != value)
                {
                    _modifyDate = value;
                    OnPropertyChanged("ModifyDate");
                }
            }
        }
        private Nullable<System.DateTime> _modifyDate;
    
        [DataMember]
        public string RecordStatus
        {
            get { return _recordStatus; }
            set
            {
                if (_recordStatus != value)
                {
                    _recordStatus = value;
                    OnPropertyChanged("RecordStatus");
                }
            }
        }
        private string _recordStatus;

        #endregion
        #region 导航属性
    
        [DataMember]
        public tbRole tbRole
        {
            get { return _tbRole; }
            set
            {
                if (!ReferenceEquals(_tbRole, value))
                {
                    var previousValue = _tbRole;
                    _tbRole = value;
                    FixuptbRole(previousValue);
                    OnNavigationPropertyChanged("tbRole");
                }
            }
        }
        private tbRole _tbRole;
    
        [DataMember]
        public tbUser tbUser
        {
            get { return _tbUser; }
            set
            {
                if (!ReferenceEquals(_tbUser, value))
                {
                    var previousValue = _tbUser;
                    _tbUser = value;
                    FixuptbUser(previousValue);
                    OnNavigationPropertyChanged("tbUser");
                }
            }
        }
        private tbUser _tbUser;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            tbRole = null;
            tbUser = null;
        }

        #endregion
        #region 关联修复
    
        private void FixuptbRole(tbRole previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.tbUserRoles.Contains(this))
            {
                previousValue.tbUserRoles.Remove(this);
            }
    
            if (tbRole != null)
            {
                if (!tbRole.tbUserRoles.Contains(this))
                {
                    tbRole.tbUserRoles.Add(this);
                }
    
                RoleID = tbRole.RoleID;
            }
            else if (!skipKeys)
            {
                RoleID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("tbRole")
                    && (ChangeTracker.OriginalValues["tbRole"] == tbRole))
                {
                    ChangeTracker.OriginalValues.Remove("tbRole");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("tbRole", previousValue);
                }
                if (tbRole != null && !tbRole.ChangeTracker.ChangeTrackingEnabled)
                {
                    tbRole.StartTracking();
                }
            }
        }
    
        private void FixuptbUser(tbUser previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.tbUserRoles.Contains(this))
            {
                previousValue.tbUserRoles.Remove(this);
            }
    
            if (tbUser != null)
            {
                if (!tbUser.tbUserRoles.Contains(this))
                {
                    tbUser.tbUserRoles.Add(this);
                }
    
                UserID = tbUser.UserID;
            }
            else if (!skipKeys)
            {
                UserID = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("tbUser")
                    && (ChangeTracker.OriginalValues["tbUser"] == tbUser))
                {
                    ChangeTracker.OriginalValues.Remove("tbUser");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("tbUser", previousValue);
                }
                if (tbUser != null && !tbUser.ChangeTracker.ChangeTrackingEnabled)
                {
                    tbUser.StartTracking();
                }
            }
        }

        #endregion
    }
}
