//------------------------------------------------------------------------------
// <auto-generated>
//     此代码是根据模板生成的。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，则所做更改将丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace TZHSWEET.Entity
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(tbRolePermission))]
    [KnownType(typeof(tbUserRole))]
    public partial class tbRole: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region 基元属性
    
        [DataMember]
        public int RoleID
        {
            get { return _roleID; }
            set
            {
                if (_roleID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("属性“RoleID”是对象键的一部分，不可更改。仅当未跟踪对象或对象处于“已添加”状态时，才能对键属性进行更改。");
                    }
                    _roleID = value;
                    OnPropertyChanged("RoleID");
                }
            }
        }
        private int _roleID;
    
        [DataMember]
        public string RoleNo
        {
            get { return _roleNo; }
            set
            {
                if (_roleNo != value)
                {
                    _roleNo = value;
                    OnPropertyChanged("RoleNo");
                }
            }
        }
        private string _roleNo;
    
        [DataMember]
        public string RoleName
        {
            get { return _roleName; }
            set
            {
                if (_roleName != value)
                {
                    _roleName = value;
                    OnPropertyChanged("RoleName");
                }
            }
        }
        private string _roleName;
    
        [DataMember]
        public Nullable<byte> Sort
        {
            get { return _sort; }
            set
            {
                if (_sort != value)
                {
                    _sort = value;
                    OnPropertyChanged("Sort");
                }
            }
        }
        private Nullable<byte> _sort;
    
        [DataMember]
        public Nullable<bool> IsVisible
        {
            get { return _isVisible; }
            set
            {
                if (_isVisible != value)
                {
                    _isVisible = value;
                    OnPropertyChanged("IsVisible");
                }
            }
        }
        private Nullable<bool> _isVisible;
    
        [DataMember]
        public Nullable<int> CreateUserID
        {
            get { return _createUserID; }
            set
            {
                if (_createUserID != value)
                {
                    _createUserID = value;
                    OnPropertyChanged("CreateUserID");
                }
            }
        }
        private Nullable<int> _createUserID;
    
        [DataMember]
        public Nullable<System.DateTime> CreateDate
        {
            get { return _createDate; }
            set
            {
                if (_createDate != value)
                {
                    _createDate = value;
                    OnPropertyChanged("CreateDate");
                }
            }
        }
        private Nullable<System.DateTime> _createDate;
    
        [DataMember]
        public Nullable<int> ModifyUserID
        {
            get { return _modifyUserID; }
            set
            {
                if (_modifyUserID != value)
                {
                    _modifyUserID = value;
                    OnPropertyChanged("ModifyUserID");
                }
            }
        }
        private Nullable<int> _modifyUserID;
    
        [DataMember]
        public Nullable<System.DateTime> ModifyDate
        {
            get { return _modifyDate; }
            set
            {
                if (_modifyDate != value)
                {
                    _modifyDate = value;
                    OnPropertyChanged("ModifyDate");
                }
            }
        }
        private Nullable<System.DateTime> _modifyDate;
    
        [DataMember]
        public string RecordStatus
        {
            get { return _recordStatus; }
            set
            {
                if (_recordStatus != value)
                {
                    _recordStatus = value;
                    OnPropertyChanged("RecordStatus");
                }
            }
        }
        private string _recordStatus;
    
        [DataMember]
        public Nullable<bool> IsDeleted
        {
            get { return _isDeleted; }
            set
            {
                if (_isDeleted != value)
                {
                    _isDeleted = value;
                    OnPropertyChanged("IsDeleted");
                }
            }
        }
        private Nullable<bool> _isDeleted;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;

        #endregion
        #region 导航属性
    
        [DataMember]
        public TrackableCollection<tbRolePermission> tbRolePermissions
        {
            get
            {
                if (_tbRolePermissions == null)
                {
                    _tbRolePermissions = new TrackableCollection<tbRolePermission>();
                    _tbRolePermissions.CollectionChanged += FixuptbRolePermissions;
                }
                return _tbRolePermissions;
            }
            set
            {
                if (!ReferenceEquals(_tbRolePermissions, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("当启用 ChangeTracking 时，无法设置 FixupChangeTrackingCollection");
                    }
                    if (_tbRolePermissions != null)
                    {
                        _tbRolePermissions.CollectionChanged -= FixuptbRolePermissions;
                    }
                    _tbRolePermissions = value;
                    if (_tbRolePermissions != null)
                    {
                        _tbRolePermissions.CollectionChanged += FixuptbRolePermissions;
                    }
                    OnNavigationPropertyChanged("tbRolePermissions");
                }
            }
        }
        private TrackableCollection<tbRolePermission> _tbRolePermissions;
    
        [DataMember]
        public TrackableCollection<tbUserRole> tbUserRoles
        {
            get
            {
                if (_tbUserRoles == null)
                {
                    _tbUserRoles = new TrackableCollection<tbUserRole>();
                    _tbUserRoles.CollectionChanged += FixuptbUserRoles;
                }
                return _tbUserRoles;
            }
            set
            {
                if (!ReferenceEquals(_tbUserRoles, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("当启用 ChangeTracking 时，无法设置 FixupChangeTrackingCollection");
                    }
                    if (_tbUserRoles != null)
                    {
                        _tbUserRoles.CollectionChanged -= FixuptbUserRoles;
                    }
                    _tbUserRoles = value;
                    if (_tbUserRoles != null)
                    {
                        _tbUserRoles.CollectionChanged += FixuptbUserRoles;
                    }
                    OnNavigationPropertyChanged("tbUserRoles");
                }
            }
        }
        private TrackableCollection<tbUserRole> _tbUserRoles;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            tbRolePermissions.Clear();
            tbUserRoles.Clear();
        }

        #endregion
        #region 关联修复
    
        private void FixuptbRolePermissions(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (tbRolePermission item in e.NewItems)
                {
                    item.tbRole = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("tbRolePermissions", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (tbRolePermission item in e.OldItems)
                {
                    if (ReferenceEquals(item.tbRole, this))
                    {
                        item.tbRole = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("tbRolePermissions", item);
                    }
                }
            }
        }
    
        private void FixuptbUserRoles(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (tbUserRole item in e.NewItems)
                {
                    item.tbRole = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("tbUserRoles", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (tbUserRole item in e.OldItems)
                {
                    if (ReferenceEquals(item.tbRole, this))
                    {
                        item.tbRole = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("tbUserRoles", item);
                    }
                }
            }
        }

        #endregion
    }
}
