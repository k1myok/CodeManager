define(["dojo/_base/declare"], function (e) { return e("DrawScale", null, { defaultAnchor: "Bottom_Right", defaultOffset: { x: 10, y: 10 }, constructor: function (e) { var t = this; t.changeFn = null, t.width = 55, t.height = 150, t.min = 0, t.max = 100, t.offsetTop = 10, t.offsetBottom = 10, t.drawHeight = t.height - t.offsetTop - t.offsetBottom, t.colors = ["#49ae22", "#77c01a", "#a0cd12", "#cadd0a", "#f8ed01", "#e1de03", "#feb60a", "#fe7e13", "#fe571b", "#fd3620"], t.defaultColors = ["#49ae22", "#77c01a", "#a0cd12", "#cadd0a", "#f8ed01", "#e1de03", "#feb60a", "#fe7e13", "#fe571b", "#fd3620"], t.point = { x: 0, y: 0 }, t.hoveredHandle = null, t.showHandle = !1, t.handleStartPos = { val: t.min, yMin: t.offsetTop, yMax: t.offsetTop + t.drawHeight, y: t.offsetTop }, t.handleEndPos = { val: t.max, yMin: t.offsetTop, yMax: t.offsetTop + t.drawHeight, y: t.offsetTop + t.drawHeight }; var a = t.box = document.createElement("div"), o = document.createElement("canvas"); return o.width = t.width, o.height = t.height, o.style.backgroundColor = "rgba(255,255,255,0.1)", o.style.cursor = "pointer", t.box = a, t.canvas = o, a.style.border = "1px solid #999", a.style.boxShadow = "rgba(0, 0, 0, 0.2) 0px 0px 4px 2px", a.style.borderRadius = "6px", a.style.backgroundColor = "rgba(255,255,255,0.25)", a.style.position = "absolute", a.style.right = "10px", a.style.bottom = "10px", a.style.width = t.width + "px", a.style.height = t.height + "px", a.style.zIndex = 1e4, a.appendChild(o), e.root.appendChild(a), t.ctx = o.getContext("2d"), t._draw(), t._Event(), a }, _draw: function () { var e = this, t = e.ctx; if (t) { t.clearRect(0, 0, t.canvas.width, t.canvas.height), e.hoveredHandle = null; var a, o = 5, n = e.offsetTop, l = 10, d = e.drawHeight; a = "default" === e.colors ? e.defaultColors : e.colors; var r = t.createLinearGradient(o, n, l, d), s = d / (a.length - 1); if (e.colors instanceof Array || "default" === e.colors) for (var i = 0; i < a.length; i++) { var f = i * s / e.height; r.addColorStop(f, a[i]) } else if ("object" == typeof e.colors) for (var i in e.colors) r.addColorStop(i, e.colors[i]); t.fillStyle = t.strokeStyle = r, t.fillRect(o, n, l, d); var h = (e.handleStartPos.y - n) / d * e.max | 0, c = e.handleStartPos.val = h + e.min, y = e.handleEndPos.val = (e.handleEndPos.y - n) / d * e.max | 0; t.textAlign = "left", t.textBaseline = "middle"; var x = o + l + 5; t.fillText("- " + e.min, x, n), t.fillText("- " + e.max, x, n + d), t.save(), t.fillStyle = "grey", e.handleStartPos.y > n + 10 && t.fillText("- " + c, x, e.handleStartPos.y), e.handleEndPos.y < n + d - 10 && t.fillText("- " + y, x, e.handleEndPos.y), t.restore(), e.showHandle && (e.drawTips({ sup: e, name: "Start", ctx: t, left: o + l, right: t.canvas.width - 5, top: e.handleStartPos.y, text: c }), e.drawTips({ sup: e, name: "End", ctx: t, left: o + l, right: t.canvas.width - 5, top: e.handleEndPos.y, text: y })), t.save(), t.fillStyle = "rgba(0,0,0,0)"; var v = o, p = l; t.fillRect(v, n, p, e.handleStartPos.y - e.offsetTop), t.fillRect(v, e.handleEndPos.y, p, d - e.handleEndPos.y + e.offsetTop), t.restore(), t.canvas.style.cursor = e.hoveredHandle ? "pointer" : "default" } }, _Event: function () { var e = this, t = e.ctx.canvas, a = !1, o = { x: 0, y: 0 }, n = { y: 0, name: null }; t.addEventListener("mouseenter", function () { e.showHandle = !0, e._draw() }), t.addEventListener("mouseleave", function () { e.showHandle = !1, e._draw() }), t.addEventListener("mousedown", function (t) { var l = e.hoveredHandle; if (l) { o.x = t.pageX, o.y = t.pageY; var d = "handle" + l.name + "Pos"; n.name = d, n.y = e[d].y, a = !0 } }), window.addEventListener("mousemove", function (t) { if (e.point.x = t.offsetX, e.point.y = t.offsetY, a) { var l = t.pageY - o.y; e[n.name].y = n.y + l; var d = n.y + l, r = e[n.name].yMax, s = e[n.name].yMin; d = d > r ? r : d, d = s > d ? s : d, e[n.name].y = d, "handleStartPos" === n.name && (e.handleEndPos.yMin = d), "handleEndPos" === n.name && (e.handleStartPos.yMax = d), t.preventDefault() } e._draw() }), window.addEventListener("mouseup", function () { a && (e.changeFn && e.changeFn(e.handleStartPos.val, e.handleEndPos.val), a = !1) }) }, change: function (e) { var t = this; t.changeFn = e }, hide: function () { var e = this; e.box.style.display = "none" }, show: function () { var e = this; e.box && (e.box.style.display = "block") }, set: function (e) { var t = this; t.max = e.max || t.max, t.min = e.min || t.min, t.colors = e.colors || t.colors, t.canvas.width = t.getByteLength(t.max + ""), t.box.style.width = t.getByteLength(t.max + "") + "px", t._draw() }, getByteLength: function (e) { return 9 * (e || "").toString().trim().replace(/[^\x00-\xff]/g, "**").length + 35 }, drawTips: function (e) { var t = e.left, a = e.right, o = e.top, n = e.ctx; n.beginPath(), n.moveTo(t + 8, o - 7), n.lineTo(a, o - 7), n.lineTo(a, o + 7), n.lineTo(t + 8, o + 7), n.lineTo(t, o), n.fill(); var l = n.isPointInPath(e.sup.point.x, e.sup.point.y); l && (e.sup.hoveredHandle = e), n.save(), n.fillStyle = "white", n.fillText(e.text, t + 8, o), n.restore() } }) });